import ipaddress
import pytest

from six import u

import uipcalc.utils


@pytest.mark.parametrize('test_input, expected', [
    (ipaddress.ip_address(u('192.168.0.1')), [
        '1', '1', '0', '0', '0', '0', '0', '0',
        '1', '0', '1', '0', '1', '0', '0', '0',
        '0', '0', '0', '0', '0', '0', '0', '0',
        '0', '0', '0', '0', '0', '0', '0', '1']),
    (ipaddress.ip_address(u('2001:DB8::F')), [
        '0', '0', '1', '0', '0', '0', '0', '0',
        '0', '0', '0', '0', '0', '0', '0', '1',
        '0', '0', '0', '0', '1', '1', '0', '1',
        '1', '0', '1', '1', '1', '0', '0', '0',
        '0', '0', '0', '0', '0', '0', '0', '0',
        '0', '0', '0', '0', '0', '0', '0', '0',
        '0', '0', '0', '0', '0', '0', '0', '0',
        '0', '0', '0', '0', '0', '0', '0', '0',
        '0', '0', '0', '0', '0', '0', '0', '0',
        '0', '0', '0', '0', '0', '0', '0', '0',
        '0', '0', '0', '0', '0', '0', '0', '0',
        '0', '0', '0', '0', '0', '0', '0', '0',
        '0', '0', '0', '0', '0', '0', '0', '0',
        '0', '0', '0', '0', '0', '0', '0', '0',
        '0', '0', '0', '0', '0', '0', '0', '0',
        '0', '0', '0', '0', '1', '1', '1', '1']),
])
def test_addr_to_bin(test_input, expected):
    assert uipcalc.utils.address_to_bin(test_input) == expected


@pytest.mark.parametrize('test_input, expected', [
    (ipaddress.ip_interface(u('192.168.0.1/24')), {
        'interface_address': '192.168.0.1',
        'interface_address_bin': ['1', '1', '0', '0', '0', '0', '0', '0', '1', '0', '1', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1'],
        'network_address': '192.168.0.0',
        'network_address_bin': ['1', '1', '0', '0', '0', '0', '0', '0', '1', '0', '1', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
        'network_broadcast': '192.168.0.255',
        'network_broadcast_bin': ['1', '1', '0', '0', '0', '0', '0', '0', '1', '0', '1', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1'],
        'network_netmask': '255.255.255.0',
        'network_netmask_bin': ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0'],
        'network_numadresses': 256,
        'network_prefixlen': 24
    }),
    (ipaddress.ip_interface(u('2001:DB8::F/64')), {
        'interface_address': '2001:0db8:0000:0000:0000:0000:0000:000f',
        'interface_address_bin
        'network_address': '2001:0db8:0000:0000:0000:0000:0000:0000',
        'network_address_bin
        'network_broadcast': '2001:0db8:0000:0000:ffff:ffff:ffff:ffff',
        'network_broadcast_bin
        'network_netmask': 'ffff:ffff:ffff:ffff:0000:0000:0000:0000',
        'network_netmask_bin
        'network_numadresses': 18446744073709551616,
        'network_prefixlen': 64
    }),
])
def test_analise_interface(test_input, expected):
    assert uipcalc.utils.analise_interface(test_input) == expected
